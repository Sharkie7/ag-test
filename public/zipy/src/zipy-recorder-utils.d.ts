import * as types from "./lib/utils/zipy-types";
export declare function rrwebRecorder(inputMasking?: boolean, sdkKey?: string): types.listenerHandler;
export declare function zipyRecorder(sdkKey: string): types.listenerHandler;
export declare const fillSdkConfigData: (response: any) => {
    domCapture: any;
    consoleCapture: any;
    networkCapture: any;
    stackTraceCapture: any;
    webSocketsCapture: any;
    ipCapture: any;
    inputMasking: any;
    textMasking: any;
    paid: any;
    apiKey: any;
    streamUrl: any;
    maxBufferSize: number;
    compression: any;
    compressionType: any;
    timeFrequency: number;
    encodingType: any;
    sessionTimeout: number;
    failureRetryCount: any;
    bufferSizeFrequency: number;
    ignoreUrl: any;
    ignoreError: any;
    ignoreConsole: any;
    isIgnoreUrlError: any;
    isIgnoreConsoleError: any;
    ip: any;
    pack: boolean;
    blockClasses: RegExp;
    customerId: any;
    headersToSanitize: any;
    xhrReqPayloadCapture: any;
    xhrRespPayloadCapture: any;
    canvasCapture: any;
    requestCapSize: any;
    responseCapSize: any;
    sizeExceededMessage: any;
    eventCountCapInSingleChunk: any;
    captureCustomZipyLogMessage: any;
    captureCustomZipyLogError: any;
    captureCustomZipyLogException: any;
    startCaptureWithoutUserActivity: any;
    consoleLogLevel: any;
    recordCrossOriginIframes: boolean;
    splitSessionSize: any;
    capturePerformance: any;
    perfUrl: any;
    perfTimeFrequency: any;
    perfBufferSizeFrequency: any;
    clickTimeFrequency: any;
    clickBufferSizeFrequency: any;
    isApiIdentifierEnable: any;
    apiUniqueIdentifier: any;
    ignoreUrlErrorCodes: any;
    ignoreUrlCodes: any;
    heatMapUrl: any;
    captureClickEvents: any;
    sessionStitching: any;
};
export declare function streamDataToServer(sdkKey: string): Promise<boolean>;
export declare function streamPerfDataToServer(sdkKey: string): Promise<boolean>;
export declare function sendClickDataToServer(sdkKey: string): Promise<boolean>;
export declare function initZipyStopRecording(sdkKey: string): void;
/**
 * Manage session Block Info in memory or local Storage
 * @param res
 */
export declare function storeSessionBlockInfo(res: any, sdkKey: string): void;
export declare function postEndUserInfoAndGetUserConfigOnServer(sdkKey: string, operation: number, newSession: boolean): Promise<any>;
export declare function postRegisterSessionDataOnServer(sdkKey: string): Promise<boolean>;
export declare function checkIfSizeOfDataSentExceeded(requestDataSize: number): void;
export declare function triggerCheckoutFlow(): void;
